@mixin box-sizing($box-model) {
  box-sizing: $box-model;
}

@mixin site-container($max-width: $base-content-width) {
  @include container($max-width);
  @extend %site-padding;
}

@mixin typography-size($map: $typography-map) {
  @each $key, $value in $map {
    @if $key == default {
      font-size: $value;
    }

    @else {
      &--#{$key} {
        font-size: $value;
      }
    }
  }
}

@mixin typography-weight($map: $weight-map) {
  @each $key, $value in $map {
    &--#{$key} {
      font-weight: $value;
    }
  }
}

@mixin text-color($map: $color-map) {
  @each $key, $value in $map {
    &--#{$key} {
      color: $value;
    }
  }
}

@mixin link-color($map: $links-map) {
  @each $key, $value in $map {
    &--color-#{$key} {
      color: map-get($value, color);

      &:hover {
        color: map-get($value, hover);
      }
    }
  }
}

@mixin bg-color($map: $color-map) {
  @each $key, $value in $map {
    &--#{$key} {
      background-color: $value;
    }
  }
}

//For better font smoothing and fix button weight problem on mac
@mixin font-smoothing($value: antialiased) {
  @if $value == antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

// Generate buttons sizes depending on schema
@mixin button-size($map: $button-size-map) {
  @each $key, $values in $map {

    $txt-size: map_get($values, txt-size);
    $line-height: map_get($values, line-height);
    $padding: map_get($values, padding);

    @if $key == 'size-default' {
      font-size: $txt-size;
      line-height: $line-height;
      padding-top: $padding;
      padding-bottom: $padding;
    }

    @else {
      &--#{$key} {
        font-size: $txt-size;
        line-height: $line-height;
        padding-top: $padding;
        padding-bottom: $padding;
      }
    }
  }
}

//Button single color item
@mixin button-color($bg:false, $text:false, $border:false, $bg-hover:false, $text-hover:false, $border-hover:false) {
  @if $bg {
    background-color: $bg;
  }

  @if $text {
    color: $text;
  }

  @if $border {
    border-color: $border;
  }

  @if $bg-hover OR $text-hover OR $border-hover {
    &:hover {
      @if $bg-hover {
        background-color: $bg-hover;
      }

      @if $text-hover {
        color: $text-hover;
      }

      @if $border-hover {
        border-color: $border-hover;
      }
    }

    &:active,
    &.is-active,
    &:focus {
      @if $bg-hover {
        background-color: $bg-hover;
      }

      @if $text-hover {
        color: $text-hover;
      }

      @if $border-hover {
        border-color: $border-hover;
      }
    }
  }
}

// Button generate colors based on scheme
@mixin button-color-generate($map: $button-color-map){
  @each $key, $values in $map {
    $bg: map_get($values, bg);
    $txt: map_get($values, txt);
    $border: map_get($values, border);
    $bg-hover: map_get($values, bg-hover);
    $txt-hover: map_get($values, txt-hover);
    $border-hover: map_get($values, border-hover);

    @if $key == 'color-default' {
      @include button-color($bg, $txt, $border, $bg-hover, $txt-hover, $border-hover);
    }

    @else {
      &--#{$key} {
        @include button-color($bg, $txt, $border, $bg-hover, $txt-hover, $border-hover);
      }
    }
  }
}

// Placeholder mixin
/* stylelint-disable */
@mixin placeholder {
  ::-webkit-input-placeholder {
    @content
  }

  :-moz-placeholder {
    @content
  }

  ::-moz-placeholder {
    @content
  }

  :-ms-input-placeholder {
    @content
  }
}

@mixin table-min-height($min-height: false) {
  min-height: $min-height;
  height: 1px; // Due to firefox bug
}

@mixin map-text-size($size-name) {
  font-size: map-font-size($size-name);
}


@mixin section-spacing-item($position: false, $size: default) {
  @if ($size == 'no-spacing') {
    padding-#{$position}: map-sections-spacing-size-tablet($size);
  } @else {
    padding-#{$position}: $section-spacing;

    @include media(tablet up) {
      padding-#{$position}: map-sections-spacing-size-tablet($size);
    }
  }
}


@mixin section-spacing($map: $section-spacing-tablet-map) {
  &__spacing-top {
    @each $key, $value in $map {
      &--#{$key} {
        @include section-spacing-item(top, $key);
      }
    }
  }

  &__spacing-bottom {
    @each $key, $value in $map {
      &--#{$key} {
        @include section-spacing-item(bottom, $key);
      }
    }
  }
}

@mixin checkbox-radio-size($trigger-size: false, $icon-size: false) {
  padding-left: $trigger-size + 15;

  // icon
  &__icon {
    width: $trigger-size;
    height: $trigger-size;

    &::before{
      font-size: $icon-size;
    }
  }
}

/* stylelint-enable */